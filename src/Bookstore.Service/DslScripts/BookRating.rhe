// See more about Computed concept at https://github.com/Rhetos/Rhetos/wiki/Read-only-data-structures

Module Bookstore
{
    // ComputeBookRating computes some information about the book by using C# implementation from an external dll.
    // The result is persisted (as a cache) in Entity BookRating, and updated automatically.

    Computed ComputeBookRating 'repository =>
        {
            var allBooksIds = repository.Bookstore.Book.Query().Select(b => b.ID).ToArray();
            return this.Load(allBooksIds).ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;

        FilterBy 'IEnumerable<Guid>' '(repository, booksIds) =>
            {
                // Collecting the input data from the database:
                var ratingInput = repository.Bookstore.Book.Query(booksIds)
                    .Select(b =>
                        new Bookstore.Service.RatingInput
                        {
                            BookId = b.ID,
                            Title = b.Title,
                            IsForeign = b.Extension_ForeignBook.ID != null
                        });

                // Calling the algorithm implemented in the external class "RatingSystem"
                var ratingSystem = new Bookstore.Service.RatingSystem();
                var ratings = ratingSystem.ComputeRating(ratingInput);

                // Mapping the results to the "ComputeBookRating" output:
                return ratings
                    .Select(rating => new ComputeBookRating { ID = rating.BookId, Rating = rating.Value })
                    .ToArray();
            }';
        
        ChangesOnBaseItem;
        ChangesOnChangedItems Bookstore.ForeignBook 'IEnumerable<Guid>' 'changedItems => changedItems.Select(fb => fb.ID)';
    }

    Entity BookRating
    {
        ComputedFrom Bookstore.ComputeBookRating
        {
            AllProperties;
            KeepSynchronized;
        }
    }
}